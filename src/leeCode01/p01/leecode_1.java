package leeCode01.p01;

import java.util.*;

/**
 * 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
 * <p>
 * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
 * <p>
 * 你可以按任意顺序返回答案。
 * <p>
 */
public class leecode_1 {
    public static void main(String[] args) {
        twoSum(new int[]{-270500, 3949710, 9897445, -2392381, -2486052, -9005702, -3761504, -2950909, 1469211, -9170275, 2464141, -9357669, -9632690, -4512985, 3481280, -7114427, -9174133, -8784809, 6243519, -5159651, 7036432, 8894878, 9050690, 4774430, -3357138, 5222633, 4158687, 3648605, 1986937, -9650676, 3976738, 9041523, 2066842, -4794781, -87160, -1705203, 5978164, -7552128, -1453206, -6244321, 7910012, -4616820, 5296614, -3106054, 7715501, -810175, -5334982, 1520947, 7270144, -9101043, -4896324, 6131798, -5029261, -5743456, 3837670, -2376616, -5238665, -920215, 2364964, 3561110, -1285370, 6632794, 2020652, -6669267, 9917191, 944757, -3107223, -8561420, -3193207, -1768996, -1901559, -5848159, -5257514, 9043639, -5603055, 9887434, 1114405, -9156325, 3840651, 6893796, 302203, -8984569, 8680571, -11294, 9836611, -3137463, -179422, -8194192, 9597324, -2087394, -9225266, 3887925, 4817212, -5159612, 3515800, -3617718, 8324560, 1890152, -8786747, -3640162, 7376546, -6958400, 9042094, 7443256, -1742287, 5972123, -3595482, 7791171, 6628499, 2791205, -5232179, 4361732, -1257292, 3999020, 4148146, 3695741, -3873684, 1280623, 876224, 9169532, -9877952, -3766683, 7114789, 8540184, 367724, 9220094, 3588796, 1539591, -8520440, 984621, -5070725, -3749850, -6329722, -4019050, -4717275, -1452766, 5402007, 7252809, -5193864, 3450288, 2316444, 5511160, 4056778, -5005784, 2999040, -3613600, -9905677, 9310405, 6212308, 8217506, -9052313, 4725641, -976385, 6676311, 5028167, -6459664, -4450031, 7895096, -6868132, -5360780, 2490985, -8917864, -5411836, -6284353, 2187258, 1735766, 1671693, 2712816, -3767429, 964035, 3217231, 9453809, 9287139, -6028181, 3168936, -5333822, -3620623, 8408044, -2388620, 124424, -1764860, -5514078, 4334554, -3795417, 8467589, -4211977, 4483997, -9301006, 4252175, -3605511, 3331491, 3918345, -6414067, 9024683, 6278010, 2412913, 6294966, 8336326, -6101144, -5558169, 7151655, 2322092, 7548912, -9535378, 8879035, -4413230, -3921409, -2057766, 5645549, -4717829, -9151019, 3588718, 6947744, -1879486, -5127860, 770823, 22220, -4485919, -1177476, -3956543, 256387, 7726351, 7934734, 2160061, 1330346, -3446358, -261264, -5533642, 9700245, -7044119, 9515778, 9970947, 2890428, -1251113, -4390534, 4960326, 4362804, -4843716, -3523441, 4845882, -101426, 9348007, -4999230, -1893298, -9731971, 2860988, -5563823, 7225994, -4826561, -1101737, 2989809, -3634790, 8106512, 1966501, 7692107, -1745077, 5789959, 7539575, 8138422, -9944767, 7153587, 4022750, 8541767, 1574589, 2644248, -7495577, -378139, -5143277, -5322908, -3523657, -3181464, 909433, -8600643, -1706172, -5183098, 4828456, -2468855, -468204, -2079493, -7983558, 1987856, -5514893, -4027004, -6541164, 1871733, 1669870, -8576374, 9872933, 4974761, 6709858, 3053149, 6833, 4413998, -5982188, -4182967, 7067844, 9672703, -9663534, 3699696, -889743, 5663244, -9981112, 1760419, -7380572, 2381072, 6434445, 3751156, 1282906, 361905, -2674480, 6790529, -229452, -2704210, -7892599, -7726116, 7586624, -3364081, 7347810, -4428653, 7665221, -8787207, 4692485, -2523416, 7849857, 6810384, 768650, -6094159, 2772620, -4619637, -8332593, -7908284, -5397206, 4183962, 709430, -5052569, 3121305, 839331, 2118455, 3530058, -3793350, -6114172, -5713777, 4405151, -5873999, 9946185, -6899691, 2085960, 4958651, -9123477, 5130562, -7403893, 5800827, -2925374, 6681746, 4181632, -1274294, -3336507, 3873165, -4193321, 8550828, 2571898, -2292852, 4119985, 928815, 613815, 2810492, -8197020, 6383672, -7938735, 6481625, -3271428, 1677032, -8642840, -8319101, -6212305, -3211153, 1588910, -6530518, 1936150, -299515, -1935337, 4432709, -252431, 9440170, -7326984, -8341464, -7816757, 7060046, 7765545, 8203043, 9375290, 5864787, -1679956, 259608, 9923062, 8607188, 2196336, 2732943, -5648131, 3980091, -7867923, -3992913, 5975966, 8422916, -8282822, 9187754, -7125781, -2789370, 3759578, -7825446, 4298058, -3070303, -8592468, -1002372, -523688, 3329365, 8990870, 6528263, -3668038, -6627012, -1252718, -1625567, -2173151, 8515213, -6256527, -6608758, 9910825, -5695987, -5471987, -3272537, 9586976, 7214026, -5335817, 425004, 1274455, 5193995, 1467733, -9972675, 1096764, 9434809, 4434911, 4323826, 5695666, 6900331, 3418235, -2584200, -1394437, -9765840, -8167255, 3890721, 8261159, -7245371, 6441743, 6341408, 2296125, -2701048, 4674584, 1740437, 1588390, 1947082, -9724772, 2995832, -4317806, -3407045, 9689175, -7466222, 1485074, 6099739, -8486654, 8903253, -6768570, -3003984, -7073875, 8259578, 91323, 3406045, -3481400, -3283222, -3399255, -717382, 9144919, -7272624, 71467, 9948956, -5923559, -1768604, -4792653, -9584805, -3613630, -3445195, -550115, 3368913, -98150, -3872723, -9619160, 2762071, -6158606, 7238416, 1349835, 4090659, 6298942, 3791502, -2244278, 8190791, -4432673, 9133855, -8995429, -3887301, 5750056, 6185233, 4982144, -1473613, 6781132, -5238013, 9160914, 2930057, 8614467, -3663771, 4605864, 7787701, 3855183, -2162907, 7967694, -1842971, 4327056, 7978253, 6553327, 7551982, 6322251, -5717543},
                3679210);
//        System.out.print(twoSum(new int[]{7030139, 6704200, -497012, -7191936, -4375390, -4647821, 2557152, -8773656, -9515460, 8043854, 8593283, -5247179, -926722, -2180192, 8809204, 2836906, -3649548, -1823316, -5346089, 4284388, 3012566, 1494478, 8669979, 4705425, -8903574, -1771110, 7474287, -4245034, -1662472, 7377710, -5798327, -9297001, -9185729, 3007768, 3904908, 5878416, 5456415, -9445165, -3015771, 343810, -9642812, 9851094, 1840065, -4551323, -5688997, -3810425, -6869460, -6337947, -8210730, -8420446, -4883888, 7675225, -3760837, 7769888, 8246389, -3694780, -1130527, 3472503, -9933111, -7565730, 8661, -3739643, -3854566, 4774584, 7754077, 2342327, 2942680, 8439832, 2487570, 6209986, -5037167, -5632871, 8343103, -6216194, -4869077, 3444820, -2569599, -6527787, -9407730, -7119702, 8166427, 9647699, 1946335, 7202554, -9329035, -3579774, 956054, 2575774, 5309506, 7258041, 1670266, 1710528, -1848963, 3533113, -8884184, -2062976, 6945888, -2234933, 3888199, -9487932, 2572609, 6193067, -2742888, -6130542, 1099706, 2427280, 4156844, -1619018, 240403, -1991291, -2062590, -6149852, 3534089, 8459952, -3752326, 556448, -8447862, -7046560, 7130333, -934479, 1929136, 1542377, -6662947, 6462359, -539930, -224553, 5689718, 1008620, -6164551, 5412231, 2976728, -7772730, -9657026, 6132906, -9100400, -8670114, -4071143, 5188451, -5422912, 5011893, 3369893, 7334275, -6078922, 2431444, -6149492, 1988738, -4389516, 7908418, 6817308, -4714163, 838388, -212572, -5199682, -6996010, -8569568, -3091453, 9759729, -5058825, -8652976, -8289954, 7760019, -428528, -5219688, -8818377, 7603688, 9584492, 800602, -8684759, -8094628, -8192738, -1424305, 121018, 3730910, 7882007, -3114996, -9249116, -3147793, 549468, -2714596, -3405512, 3846163, 7549682, 237985, 4957007, 1571252, 1774354, -9221752, 1304866, -1256621, -7009846, -3273068, -3292991, 5255957, -2635494, -5026408, 1630616, 6778779, 4536503, 1031392, 2145733, -7862784, -3581377, 403141, -2921732, 8848312, -1371934, -621037, -1490913, -5048705, -9008695, 7253047, -1088724, 7454725, -208577, -8615645, -8622992, 9765312, -73116, -2782129, 2063232, 7125209, -7030265, -7877656, -5472679, -9939611, 9011862, 5948190, 1718651, -2078542, 8928383, 7849954, -2791826, -4103027, 6766984, 9223189, 8943280, -7980296, 3423655, 1594946, 5305106, -6116908, -371475, -7148795, 5072696, 4059304, 932842, -7444503, -7695471, 150619, 9795176, 6295282, -2473227, -7913510, 2188280, -3086121, 6400772, 3849100, 2807301, 2717193, -7363386, -7532970, -5074540, 5888925, 5203490, 3100584, -9094367, 9917107, 3303364, -160563, -1300053, -5534191, -9422839, -8794795, 5832913, 5014969, -4083644, 1222696, 3568215, -3484271, -6208925, 3654239, 5606213, 3240602, -9516785, -3234695, 9384537, 6481237, 7064110, -1844289, 7480213, -7586810, -1476406, 9372564, -3018428, -9928562, -7497651, 9878118, 1005719, -1169220, 1405187, -6781383, -4144683, -1311061, 4226496, -6650249, 981677, -6789342, -4221773, 5301315, -8087465, 6058467, -2188723, 3738985, 6175141, -8364570, -3242122, -9089504, 6013000, -8067946, -6173514, -2335419, -1298216, 7812256, -4080726, 9822977, -5667884, 7116961, 1703857, -8561026, -7836115, 5623273, 7845833, -9152764, 1836617, 4330528, 4222090, 8628746, -7758831, -1522417, 8696556, -9982052, 8718354, 6463754, 414109, 5111719, 375614, -5982571, -1615938, -6980851, 7907333, -8469780, 7214811, 4857399, 1013564, 5691013, -8379079, 7254601, -3425239, 6528965, 4973812, -629406, 4729364, 1906790, -1441431, -7848011, -6678072, -40640, 5066908, -6009326, -9008264, 5052126, -2375552, -4249011, 177047, -3234165, -8094856, -3540596, 8010909, -6456468, 7144875, 3592008, -985174, -6683665, -4211104, 4251934, 8452789, -2488938, -4531769, 6329409, -6115848, 8327596, 1389100, 1290731, 9474648, 5198798, -8986743, 7783183, 4370369, -9316687, 2583743, 3251363, 7752686, -3167282, -2891292, -4020103, 6624099, 5319571, 2068415, -3082965, 5144339, 6476645, 285575, -9628996, 7841312, 9687125, 1125395, 4948754, 2261842, -8630350, 7725835, -6138850, 5016871, -5217025, 5025762, -1087153, 9530754, 1859897, -3790244, 4325374, -8649277, -545142, 8103612, -4678246, -6937623, 758564, -2293740, 2421120, -9530838, 2241076, 8558783, 8100504, 7607402, 4348112, -3888300, 8294704, 7523423, -6532130, 501997, 1088785, -8162865, 2230592, 6065932, -3472770, 6774669, 807516, 2120122, -7348460, -6514100, -4685638, 8066946, 3479667, 8974575, -2635395, -9224538, -988437, -1155694, 7538759, -7727700, -7764121, 3845287, -3255445, -8790586, -4097150, -8281741, -6659390, -4762385}, 3679210).toString());
    }


    public static int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> resultMap = new HashMap<>();
        ArrayList<Integer> filterNums = new ArrayList<>();
        for (int num : nums) {
            filterNums.add(num);
        }
        for (int i = 0; i < filterNums.size(); i++) {
            for (int j = i + 1; j < filterNums.size(); j++) {
                if (filterNums.get(i) + filterNums.get(j) == target) {
                    System.out.println(i + "-" + j + "     " + filterNums.get(i) + "+" + filterNums.get(j) + "=" + (filterNums.get(i) + filterNums.get(j)));

                    if (!resultMap.containsKey(i) && !resultMap.containsValue(i)) {
                        resultMap.put(i, j);
                    }
                }
            }
        }
        Integer[] resultArray;
        ArrayList<Integer> resultInts = new ArrayList<>();
        resultMap.forEach((key, value) -> {
            resultInts.add(key);
            resultInts.add(value);
        });
        resultArray = resultInts.toArray(Integer[]::new);
        int[] ints = Arrays.stream(resultArray).mapToInt(Integer::valueOf).toArray();
        for (int anInt : ints) {
            System.out.println(anInt);
        }
        return ints;
    }

}


